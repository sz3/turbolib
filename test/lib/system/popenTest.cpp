/* This code is subject to the terms of the Mozilla Public License, v.2.0. http://mozilla.org/MPL/2.0/. */
#include "unittest.h"

#include "popen.h"
using std::string;

TEST_CASE( "popenTest/testGood", "[unit]" )
{
	turbo::popen cmd("ls system_test");
	assertTrue( cmd.good() );

	string output = cmd.read();
	assertEquals( "system_test\n", output );
}

TEST_CASE( "popenTest/testChained", "[unit]" )
{
	string output = turbo::popen("ls system_test").read();
	assertEquals( "system_test\n", output );
}

TEST_CASE( "popenTest/testBad", "[unit]" )
{
	turbo::popen cmd("mkdir /inordinately/long/nonexistent/path");
	assertTrue( cmd.good() );

	string output = cmd.read();
	assertEquals( "", output );
}

TEST_CASE( "popenTest/testDelayedOpen", "[unit]" )
{
	turbo::popen cmd;
	assertFalse( cmd.good() );
	assertEquals( "", cmd.read() );
	
	assertTrue( cmd.open("ls system_test") );
	assertTrue( cmd.good() );
	assertFalse( cmd.open("foo") ); // don't re-open

	string output = cmd.read();
	assertEquals( "system_test\n", output );
}

